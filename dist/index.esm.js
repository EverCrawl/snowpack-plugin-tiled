import t from"fs";import e from"path";import{JSDOM as i}from"jsdom";const o=new(new i("").window.DOMParser);async function r(t){return Promise.resolve(l(t))}function l({filePath:e}){const i=t.readFileSync(e,"utf-8"),r=o.parseFromString(i,"text/xml");let l;return s(r)?l={".amt":JSON.stringify(u(e,r))}:c(r)&&(l={".amt":JSON.stringify(m(e,r,["collision"]))}),l}const n=Object.freeze({0:"None",1:"Full",2:"Ladder",3:"Platform",4:"SlopeLeft",5:"SlopeRight",6:"SlopeLeftBottom",7:"SlopeRightBottom",8:"SlopeLeftTop",9:"SlopeRightTop",None:0,Full:1,Ladder:2,Platform:3,SlopeLeft:4,SlopeRight:5,SlopeLeftBottom:6,SlopeRightBottom:7,SlopeLeftTop:8,SlopeRightTop:9});function s(t){for(let e=0;e<t.children.length;++e){const i=t.children[e];if("map"===i.tagName&&null!=i.attributes.getNamedItem("tiledversion"))return!0}return!1}function a(e){const i=o.parseFromString(t.readFileSync(e,"utf-8"),"text/xml").getElementsByTagName("template")[0].getElementsByTagName("object")[0],r=d(i);return{type:i.getAttribute("type"),width:parseFloat(i.getAttribute("width"))??void 0,height:parseFloat(i.getAttribute("height"))??void 0,props:Object.keys(r??{}).length>0?r:void 0}}function p(e){return m(e,o.parseFromString(t.readFileSync(e,"utf-8"),"text/xml"))}function g(t,i){const o=t.getAttribute("template");let r;null!=o&&(r=a(e.join(i,o)));const l={...r?.props??{},...d(t)??{}},n=t.getAttribute("width")??r?.width??null,s=t.getAttribute("height")??r?.height??null;let p;if(null!=(p=t.querySelector("ellipse"))){return{type:r?.type??"ellipse",id:parseInt(t.getAttribute("id")),x:parseFloat(t.getAttribute("x")),y:parseFloat(t.getAttribute("y")),width:n,height:s,props:Object.keys(l).length>0?l:void 0}}if(null!=(p=t.querySelector("point"))){return{type:r?.type??"point",id:parseInt(t.getAttribute("id")),x:parseFloat(t.getAttribute("x")),y:parseFloat(t.getAttribute("y")),props:Object.keys(l).length>0?l:void 0}}if(null!=(p=t.querySelector("polygon"))){const e=parseFloat(t.getAttribute("x")),i=parseFloat(t.getAttribute("y")),o=[];for(const t of p.getAttribute("points").split(" ")){const r=t.indexOf(","),l=parseFloat(t.substr(0,r)),n=parseFloat(t.substr(r+1));o.push([e+l,i+n])}return{type:r?.type??"polygon",id:parseInt(t.getAttribute("id")),x:e,y:i,points:o,props:Object.keys(l).length>0?l:void 0}}if(null!=(p=t.querySelector("polyline"))){const e=parseFloat(t.getAttribute("x")),i=parseFloat(t.getAttribute("y")),o=[];for(const t of p.getAttribute("points").split(" ")){const r=t.indexOf(","),l=parseFloat(t.substr(0,r)),n=parseFloat(t.substr(r+1));o.push([e+l,i+n])}return{type:r?.type??"polyline",id:parseInt(t.getAttribute("id")),x:e,y:i,points:o,props:Object.keys(l).length>0?l:void 0}}if(null!=(p=t.querySelector("text"))){return{type:r?.type??"text",id:parseInt(t.getAttribute("id")),x:parseFloat(t.getAttribute("x")),y:parseFloat(t.getAttribute("y")),width:n,height:s,text:{size:p.getAttribute("pixelsize"),wrap:1===parseInt(p.getAttribute("wrap")),content:p.textContent},props:Object.keys(l).length>0?l:void 0}}{const e={type:r?.type??void 0,id:parseInt(t.getAttribute("id")),x:parseFloat(t.getAttribute("x")),y:parseFloat(t.getAttribute("y")),width:n,height:s,props:Object.keys(l).length>0?l:void 0},i=t.getAttribute("gid");return null!=i?(void 0===e.type&&(e.type="tile"),e.tileId=i):void 0===e.type&&(e.type="rect"),e}}function u(t,i){const o=i.getElementsByTagName("map")[0],r={width:parseFloat(o.getAttribute("width")),height:parseFloat(o.getAttribute("height")),background:o.getAttribute("backgroundcolor"),tilesets:[],collision:[],tile:[],object:{}};let l=0;for(const t of o.getElementsByTagName("tileset")){const e=l++;r.tilesets[e]={id:e,firstgid:parseFloat(t.getAttribute("firstgid")),path:t.getAttribute("source")}}0===r.tilesets.length&&console.warn("");let s=[];for(const i of r.tilesets)s.push({id:i.id,firstgid:i.firstgid,data:p(e.join(e.dirname(t),i.path.replace(".tsx",".xml")))});s=s.sort(((t,e)=>t.firstgid-e.firstgid)).reverse();const a=[...o.getElementsByTagName("group")[0].getElementsByTagName("layer")].sort(((t,e)=>parseFloat(t.getAttribute("name"))-parseFloat(e.getAttribute("name"))));for(let e=0;e<a.length;++e){const i=a[e].getElementsByTagName("data")[0].textContent.replace(/\s+/g,"").split(",");for(let o=0;o<i.length/r.width;++o)for(let l=0;l<i.length/r.height;++l){const a=l+o*r.width;let p,g,u=parseFloat(i[a]);if(u&=536870911,0===u)null==r.collision[a]&&(r.collision[a]=n.None),p=0,g=0;else{const i=s.find((t=>t.firstgid<=u));if(null==i)throw new Error(`[File '${t}'] Could not find tileset for layer#${e}, expected tileset.firstgid < ${u}`);const o=i.data.tiles[u-i.firstgid];if(null!=o&&null!=o.props&&null!=o.props.collision){const t=n[o.props.collision];if(null==t)throw new Error(`Invalid CollisionKind ${o.props.collision}`);r.collision[a]=t}else null==r.collision[a]&&(r.collision[a]=n.None);p=i.id,g=u-i.firstgid+1}null==r.tile[e]&&(r.tile[e]=[]),r.tile[e][a]=p<<10>>>0|g<<0>>>0}}for(const i of o.getElementsByTagName("objectgroup")[0].getElementsByTagName("object")){const o=i.getAttribute("name");if(null==o)throw new Error(`[${t}] Object#${i.getAttribute("id")} is missing 'name'`);if(null!=r.object[o])throw new Error(`[${t}] Duplicate object name ${o}`);if(r.object[o]=g(i,e.dirname(t)),"tile"===r.object[o].type){const e=s.find((t=>t.firstgid<=r.object[o].tileId));if(null==e)throw new Error(`[File '${t}'] Could not find tileset for entity '${o}', expected tileset.firstgid < ${r.object[o].gid}`);const i=e.id,l=r.object[o].tileId-e.firstgid;r.object[o].tileId=i<<10>>>0|l<<0>>>0}}for(let t=0;t<r.tilesets.length;++t)r.tilesets[t]=r.tilesets[t].path.replace(".xml",".amt");return r}function c(t){for(let e=0;e<t.children.length;++e){const i=t.children[e];if("tileset"===i.tagName&&null!=i.attributes.getNamedItem("tiledversion"))return!0}return!1}function d(t,e=[]){const i=t.getElementsByTagName("properties")[0];if(null==i)return null;const o={};for(const t of i.getElementsByTagName("property")){const i=t.getAttribute("name");e.includes(i)||(o[t.getAttribute("name")]=t.getAttribute("value"))}return 0===Object.keys(o).length?null:o}function f(t){const e=t.getElementsByTagName("animation")[0];if(null==e)return null;const i=[];for(const t of e.getElementsByTagName("frame")){const e=parseInt(t.getAttribute("tileid"));i.push(e)}return i}function m(t,e,i=[]){const o=e.getElementsByTagName("tileset")[0],r=o.getElementsByTagName("image")[0].getAttribute("source"),l={};for(const t of o.getElementsByTagName("tile")){const e={},o=f(t);null!=o&&(e.anim=o);const r=d(t,i);null!=r&&(e.props=r),Object.keys(e).length>0&&(l[parseInt(t.getAttribute("id"))]=e)}return{image:r,tiles:l}}function b(){return{name:"snowpack-plugin-tiled",resolve:{input:[".xml"],output:[".amt"]},load:r}}export default b;export{n as CollisionKind,s as isTilemapXML,c as isTilesetXML,r as load,l as loadSync,a as loadTemplate,u as transformTilemap,m as transformTileset};
